<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>data-science-from-scratch on knapply()</title>
    <link>/categories/data-science-from-scratch/</link>
    <description>Recent content in data-science-from-scratch on knapply()</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2018 Brendan Knapp</copyright>
    <lastBuildDate>Mon, 12 Nov 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/categories/data-science-from-scratch/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Central Tendency</title>
      <link>/post/central-tendency/</link>
      <pubDate>Mon, 12 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/central-tendency/</guid>
      <description>MeanMean--R----Rcpp----C++----Python----NumPy--
r_vector &amp;lt;- c(126, 793, 999, 525, 851, 798, 120, 714, 852, 151,190, 41, 612, 826, 507, 105, 14, 237, 669, 7)mean(r_vector)#&amp;gt; [1] 456.</description>
    </item>
    
    <item>
      <title>Describing Data</title>
      <link>/post/describing-data/</link>
      <pubDate>Mon, 12 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/describing-data/</guid>
      <description>Length/SizeMinimum and Maximum ValuesUnique ValuesSum --Length/Size--R----Rcpp----C++----Python----NumPy--
describing-data/r-length-size.R r_vector &amp;lt;- c(126, 793, 999, 525, 851, 798, 120, 714, 852, 151, 190, 41, 612, 826, 507, 105, 14, 237, 669, 7)r_vector#&amp;gt; [1] 126 793 999 525 851 798 120 714 852 151 190 41 612 826 507 105 14 237 669 7length(r_vector)#&amp;gt; [1] 20describing-data/rcpp-length-size.</description>
    </item>
    
    <item>
      <title>Bubble Sort</title>
      <link>/post/bubble-sort/bubble-sort/</link>
      <pubDate>Mon, 16 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/bubble-sort/bubble-sort/</guid>
      <description>PythonUnsorted listBubble Sort FunctionResultRUnsorted vectorBubble Sort FunctionResultEnvironmentPythonUnsorted listunsorted = [9, 2, 8, 3, 7, 4, 6, 5, 1]Bubble Sort Functiondef bubble_sort(unsorted_sequence):sorted_sequence = unsorted_sequencefor iteration, _ in enumerate(sorted_sequence):for i, _ in enumerate(sorted_sequence):if i + 1 &amp;lt;= len(sorted_sequence) - 1:current_value = sorted_sequence[i]next_value = sorted_sequence[i + 1]if current_value &amp;gt; next_value:sorted_sequence[i] = next_valuesorted_sequence[i + 1] = current_valueprint(f&amp;#39;Iteration #{iteration + 1}: {&amp;quot;, &amp;quot;.</description>
    </item>
    
  </channel>
</rss>