[
  {
    "authors": null,
    "categories": [
      "tutorial",
      "programming"
    ],
    "content": "\r\rDefine doubler_*() Function\rRun doubler_*() Function\r\r\rDefine doubler_*() Function\r\rr_doubler \u0026lt;- function(x) {\rx * 2\r}\r\rdef py_doubler(x):\rreturn x * 2\r\r\r#include \u0026lt;Rcpp.h\u0026gt;\r// [[Rcpp::export]]\rint cpp_doubler(int x) {\rreturn x * 2;\r}\r\r\r\r\rRun doubler_*() Function\r\rr_doubler(x = 4)\r## [1] 8\r\rprint(py_doubler(x = 4))\r## 8\r\r\rcpp_doubler(x = 4)\r## [1] 8\r\r\r\rCitation\rKnapp, B. (2018, Nov. 1). Functions. Retrieved from https://knapply.com/post/functions/\r@misc{functions,\rauthor = {Knapp, Brendan},\rtitle = {Functions}\rurl = {https://knapply.com/post/functions/},\ryear = 2018,\rmonth = Nov,\rday = 1,\r}\r\r\r",
    "date": 1541030400,
    "expirydate": -62135596800,
    "kind": "page",
    "lang": "en",
    "lastmod": 1541196093,
    "objectID": "9a8dc953cedc3c6d3389666dd0d1022d",
    "permalink": "/post/functions/",
    "publishdate": "2018-11-01T00:00:00Z",
    "relpermalink": "/post/functions/",
    "section": "post",
    "summary": "Defining functions in R, Python, and C++/Rcpp.",
    "tags": [
      "R",
      "Python",
      "Cpp",
      "tutorial",
      "programming"
    ],
    "title": "Functions",
    "type": "post"
  },
  {
    "authors": null,
    "categories": [
      "R",
      "data-carpentry",
      "tutorial"
    ],
    "content": "\r\r\rContext\rReflection\rResources Up Front\rtibble\r%\u0026gt;%\r“Tidy” Data\rselect() columns\rfilter() Rows\rmutate() Columns\rarrange() Rows\rgroup_by() for Grouped Data\rsummarize()\r\r\r\nConsidering this is a blog post, I’m going to get all bloggy here before jumping into the code.\nContext\rI recently had the opportunity to teach some R coding to colleagues and classmates in a series of workshops. Some had already dabbled in R or other programming languages, but it was the first time that the majority of participants had written a single line of code.\nA few things happened in the week following the last session that I didn’t expect.\nFirst, I saw a bit of R code written on a campus whiteboard that had nothing to do with me, but was straight out of the workshop. It may have come from some of my data-centric colleagues who use R, so I didn’t think too much of it.\nThen, I overheard a conversation involving R from those in a program that doesn’t require any data-related coursework. Many folks are familiar with the name as the school’s primary data analysis course uses the {Rcmdr} GUI for statistical analysis, but these students would not have necessarily taken the course. I wondered if there was a connection.\nFinally, a student who didn’t even attend came to my office hours asking for resources. Why exactly? Some of his work colleagues attended. It turns out that they are now trying to incorporate some R-powered analysis in their work and he doesn’t want to miss out.\nThe workshop consisted of 3 consecutive Fridays lasting 90 minutes each. That’s only a total of 4.5 hours.\nThat’s relatively tiny amount of time.\nWait. Scratch that.\nThat’s a negligible amount of time.\n… but it was enough to convince some participants and non-participants that they should take advantage of the power that a bit of data-centric coding can offer.\n\rReflection\rI taught a similar 90 minute workshop last spring using R, but focused on base R and a few data types. 10 minutes in, I’m trying to explain the difference between a data.frame and a matrix and the person asking the question says something along the lines of “I guess I’m kinda dumb. Don’t worry about it.”\nFor context, these were international policy graduate students. While some have completed a bit of quantitative coursework, most don’t have a hardcore math or science background and programming is seen as something akin to wizardry. However, they hold domain expertise in some rather important subjects. These include WMD nonproliferation, international development, economic diplomacy, conflict studies, and environmental policy. Nearly half of the participants were international students and everyone is proficient in at least a second natural language. Most have already tackled big, complicated problems in their careers and the others are on their way to doing so following graduation. In a nutshell, they’re not dumb. The way I was teaching was dumb. They knew that they’re supposed to want to learn new skills, but they didn’t know why. Focusing on the “basics” didn’t show them anything immediately useful. It didn’t show them the why.\nAfter the workshop, I never heard anyone mention R outside my circle of fellow data folks.\nSince that time, I started using R more. Like, a lot more. I have found a way to use R in nearly everything I’ve done since May 2017. As a policy student myself, that has not always been very straightforward and I was still avoiding the strange “tidy” code I’d encounter on Stack Overflow and elsewhere. I realized the error of my ways when I came across Julia Silge and David Robinson’s Text Mining with R. It was like discovering that you’re still in the stone age while most people are off partying on spaceships.\nIn preparation for this workshop series, I found a lot of inspiration in Michael Levy’s presentation on teaching R, which itself echoes principles preached by other tidyverse advocates.\nA huge takeaway: live coding works.\nWriting code in real time shows every single step we make from opening the IDE, to reshaping the data, to debugging inevitable errors, to rendering a final report.\nWithin a few short weeks of learning to code, it might be surprising how many tiny steps become automatic and taken for granted. Tack on a couple more months and newcomers will think you’re speaking in an entirely different language because you’re explaining something requiring context they simply haven’t yet encountered. Add a few years and… yeesh.\nSomething that frustrated me when I first started is that code explanations often seem to be written in such a way that dismisses how difficult establishing the basics can be. I’m half-convinced that, for some folks, the trauma was so great that they have simply blocked it from memory. Code is intimidating enough, but if an instructor doesn’t make a conscious effort to empathize, students will question their ability to learn. The goal is empowerment, not intimidation.\nLive coding enforces a maximum speed in moving through exercises, which not only gives students more time to digest what you’re doing. It also provides more opportunities for them to ask questions on details you might find trivial, but only because you already suffered through them.\nI also think that the benefits of live coding extend to the instructor as well. I found myself answering questions that framed things in ways that I had not even considered, but were exactly how multiple participants saw the task. Additionally, I have a better sense of which concepts need to be covered in more detail, as they weren’t necessarily as intuitive for others as they were for me. On the flip-side, concepts with which I remember struggling may not be difficult at all for others to understand.\n\n… and now that we got the bloggyness of a blog post out of the way…\nHere is the workflow I used for the first session. The goal was to introduce the primary {dplyr} verbs, functions that accomplish tasks necessary in nearly every project. Between each section is an exercise using {ggplot}.\n\n# install.packages(\u0026quot;tidyverse\u0026quot;)\rlibrary(tidyverse)\r# install.packages(\u0026quot;gapminder\u0026quot;)\rlibrary(gapminder)\r# loads the gapminder data set\r## just to prettify printed tables when knitting\r# install.packages(\u0026quot;kableExtra\u0026quot;)\rlibrary(knitr)\rlibrary(kableExtra)\rWorkflow\r\n\r\rResources Up Front\rData Carpentry\r \n\n\rCheat Sheet\r\r\n\n\rPlotting\r\n\rCheat Sheet\r\r\n\rR Graph Catalog\r\r\n\rOur Data\rIn the following exercises, gm.data.frame will be used to demonstrate actions that use {base} R methods for data.frame operations while gm_df will be used to to demonstrate {tidyverse} methods for tibble operations.\ngm.data.frame \u0026lt;- as.data.frame(gapminder)\rgm_df \u0026lt;- gapminder\r\r\rtibble\rclass(gm.data.frame)\r## [1] \u0026quot;data.frame\u0026quot;\rclass(gm_df)\r## [1] \u0026quot;tbl_df\u0026quot; \u0026quot;tbl\u0026quot; \u0026quot;data.frame\u0026quot;\rtibbles are opinionated data.frames that keep everything that is helpful about data.frames, changes some of their quirks, and adds methods that makes them even more useful.\nPrinting gm.data.frame dumps the whole data set to the console, typically requiring head() to limit the output.\nPrinting\rhead(gm.data.frame)\r## country continent year lifeExp pop gdpPercap\r## 1 Afghanistan Asia 1952 28.801 8425333 779.4453\r## 2 Afghanistan Asia 1957 30.332 9240934 820.8530\r## 3 Afghanistan Asia 1962 31.997 10267083 853.1007\r## 4 Afghanistan Asia 1967 34.020 11537966 836.1971\r## 5 Afghanistan Asia 1972 36.088 13079460 739.9811\r## 6 Afghanistan Asia 1977 38.438 14880372 786.1134\rPrinting gm_df provides the dimensions, data type of each column, and only prints the first 10 rows.\ngm_df\r## # A tibble: 1,704 x 6\r## country continent year lifeExp pop gdpPercap\r## \u0026lt;fct\u0026gt; \u0026lt;fct\u0026gt; \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 Afghanistan Asia 1952 28.8 8425333 779.\r## 2 Afghanistan Asia 1957 30.3 9240934 821.\r## 3 Afghanistan Asia 1962 32.0 10267083 853.\r## 4 Afghanistan Asia 1967 34.0 11537966 836.\r## 5 Afghanistan Asia 1972 36.1 13079460 740.\r## 6 Afghanistan Asia 1977 38.4 14880372 786.\r## 7 Afghanistan Asia 1982 39.9 12881816 978.\r## 8 Afghanistan Asia 1987 40.8 13867957 852.\r## 9 Afghanistan Asia 1992 41.7 16317921 649.\r## 10 Afghanistan Asia 1997 41.8 22227415 635.\r## # ... with 1,694 more rows\r\r\r%\u0026gt;%\r\nThe pipe (%\u0026gt;%) is used to chain operations together. Underneath the hood, it’s taking the value on the left-hand side of %\u0026gt;% and using it as the first argument of the function on the right-hand side of %\u0026gt;%.\nFor example, these 2 lines are doing the exact same thing.\nhead(gm_df)\r## # A tibble: 6 x 6\r## country continent year lifeExp pop gdpPercap\r## \u0026lt;fct\u0026gt; \u0026lt;fct\u0026gt; \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 Afghanistan Asia 1952 28.8 8425333 779.\r## 2 Afghanistan Asia 1957 30.3 9240934 821.\r## 3 Afghanistan Asia 1962 32.0 10267083 853.\r## 4 Afghanistan Asia 1967 34.0 11537966 836.\r## 5 Afghanistan Asia 1972 36.1 13079460 740.\r## 6 Afghanistan Asia 1977 38.4 14880372 786.\rgm_df %\u0026gt;% head()\r## # A tibble: 6 x 6\r## country continent year lifeExp pop gdpPercap\r## \u0026lt;fct\u0026gt; \u0026lt;fct\u0026gt; \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 Afghanistan Asia 1952 28.8 8425333 779.\r## 2 Afghanistan Asia 1957 30.3 9240934 821.\r## 3 Afghanistan Asia 1962 32.0 10267083 853.\r## 4 Afghanistan Asia 1967 34.0 11537966 836.\r## 5 Afghanistan Asia 1972 36.1 13079460 740.\r## 6 Afghanistan Asia 1977 38.4 14880372 786.\rFor simple operations involving 1 function, %\u0026gt;% is only (arguably) beneficial in that it improves readability as the flow of operations go from left to right.\n%\u0026gt;% become truly useful when you need to perform multiple operations in succession, which is the vast majority of data carpentry.\nAs an arbitrary example, let’s say that we want to select the head() (first 6 rows) of gm.data.frame and convert it to a tibble.\nWithout %\u0026gt;%, we can do this in a few ways.\nUse intermediate variables.\r\rget gm.data.frame’s head() and assign it to no_pipe_1\rconvert no_pipe_1 to a tibble with as_tibble() and assign it to no_pipe_2\r\r\rno_pipe_1 \u0026lt;- head(gm.data.frame)\rno_pipe_2 \u0026lt;- as_tibble(no_pipe_1)\rno_pipe_2\r## # A tibble: 6 x 6\r## country continent year lifeExp pop gdpPercap\r## * \u0026lt;fct\u0026gt; \u0026lt;fct\u0026gt; \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 Afghanistan Asia 1952 28.8 8425333 779.\r## 2 Afghanistan Asia 1957 30.3 9240934 821.\r## 3 Afghanistan Asia 1962 32.0 10267083 853.\r## 4 Afghanistan Asia 1967 34.0 11537966 836.\r## 5 Afghanistan Asia 1972 36.1 13079460 740.\r## 6 Afghanistan Asia 1977 38.4 14880372 786.\rNest gm.data.frame inside of head(), which is itself nested inside of as_tibble().\r\ras_tibble(head(gm.data.frame))\r## # A tibble: 6 x 6\r## country continent year lifeExp pop gdpPercap\r## * \u0026lt;fct\u0026gt; \u0026lt;fct\u0026gt; \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 Afghanistan Asia 1952 28.8 8425333 779.\r## 2 Afghanistan Asia 1957 30.3 9240934 821.\r## 3 Afghanistan Asia 1962 32.0 10267083 853.\r## 4 Afghanistan Asia 1967 34.0 11537966 836.\r## 5 Afghanistan Asia 1972 36.1 13079460 740.\r## 6 Afghanistan Asia 1977 38.4 14880372 786.\rWith %\u0026gt;%, we can chain these actions together in the order in which they occur, which is also the way we read English.\n\rHere, we do the same thing by:\r\rtaking gm_df\rpiping it to head() (keeping the top 6 rows)\rpiping it to as_tibble() (converting it to a tibble data frame)\r\r\rgm_df %\u0026gt;% head() %\u0026gt;% as_tibble()\r## # A tibble: 6 x 6\r## country continent year lifeExp pop gdpPercap\r## \u0026lt;fct\u0026gt; \u0026lt;fct\u0026gt; \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 Afghanistan Asia 1952 28.8 8425333 779.\r## 2 Afghanistan Asia 1957 30.3 9240934 821.\r## 3 Afghanistan Asia 1962 32.0 10267083 853.\r## 4 Afghanistan Asia 1967 34.0 11537966 836.\r## 5 Afghanistan Asia 1972 36.1 13079460 740.\r## 6 Afghanistan Asia 1977 38.4 14880372 786.\rIn practice, it’s usually best to place each of the functions on a separate line as it facilitates debugging and further improves readability.\ngm_df %\u0026gt;%\ras_tibble() %\u0026gt;%\rhead()\r## # A tibble: 6 x 6\r## country continent year lifeExp pop gdpPercap\r## \u0026lt;fct\u0026gt; \u0026lt;fct\u0026gt; \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 Afghanistan Asia 1952 28.8 8425333 779.\r## 2 Afghanistan Asia 1957 30.3 9240934 821.\r## 3 Afghanistan Asia 1962 32.0 10267083 853.\r## 4 Afghanistan Asia 1967 34.0 11537966 836.\r## 5 Afghanistan Asia 1972 36.1 13079460 740.\r## 6 Afghanistan Asia 1977 38.4 14880372 786.\rFrom here on, you’ll notice prettify(). This is only being used to print tables in a clean format when the document is knit()ted.\nI’m choosing to include it here as I often find myself reading similar pages where I come across a really effective way to format some output. I understand why the author chooses to set echo=FALSE, but it can be nice to see the underlying code without having to hunt through their GitHub.\ndata.frames will print a default maximum of 3 rows while tibbles will print a default maximum of 10 rows.\nprettify \u0026lt;- function(df, n = NULL, cols_changed = NULL, rows_changed = NULL){\rif(is.null(n)) n \u0026lt;- ifelse(is.tibble(df), 10, 3)\rpretty_df \u0026lt;- df %\u0026gt;%\rhead(n) %\u0026gt;%\rkable(format = \u0026quot;html\u0026quot;) %\u0026gt;%\rkable_styling(bootstrap_options = c(\u0026quot;striped\u0026quot;, \u0026quot;bordered\u0026quot;, \u0026quot;condensed\u0026quot;,\r\u0026quot;hover\u0026quot;, \u0026quot;responsive\u0026quot;),\rfull_width = FALSE)\rif(!is.null(cols_changed)){\rpretty_df \u0026lt;- pretty_df %\u0026gt;%\rcolumn_spec(cols_changed, bold = T, color = \u0026quot;black\u0026quot;, background = \u0026quot;#C8FAE3\u0026quot;)\r}\rif(!is.null(rows_changed)){\rpretty_df \u0026lt;- pretty_df %\u0026gt;%\rrow_spec(rows_changed, bold = T, color = \u0026quot;black\u0026quot;, background = \u0026quot;#C8FAE3\u0026quot;)\r}\rreturn(pretty_df)\r}\rgm.data.frame %\u0026gt;%\rprettify()\r\r\rcountry\r\rcontinent\r\ryear\r\rlifeExp\r\rpop\r\rgdpPercap\r\r\r\r\r\rAfghanistan\r\rAsia\r\r1952\r\r28.801\r\r8425333\r\r779.4453\r\r\r\rAfghanistan\r\rAsia\r\r1957\r\r30.332\r\r9240934\r\r820.8530\r\r\r\rAfghanistan\r\rAsia\r\r1962\r\r31.997\r\r10267083\r\r853.1007\r\r\r\r\rgm_df %\u0026gt;%\rprettify()\r\r\rcountry\r\rcontinent\r\ryear\r\rlifeExp\r\rpop\r\rgdpPercap\r\r\r\r\r\rAfghanistan\r\rAsia\r\r1952\r\r28.801\r\r8425333\r\r779.4453\r\r\r\rAfghanistan\r\rAsia\r\r1957\r\r30.332\r\r9240934\r\r820.8530\r\r\r\rAfghanistan\r\rAsia\r\r1962\r\r31.997\r\r10267083\r\r853.1007\r\r\r\rAfghanistan\r\rAsia\r\r1967\r\r34.020\r\r11537966\r\r836.1971\r\r\r\rAfghanistan\r\rAsia\r\r1972\r\r36.088\r\r13079460\r\r739.9811\r\r\r\rAfghanistan\r\rAsia\r\r1977\r\r38.438\r\r14880372\r\r786.1134\r\r\r\rAfghanistan\r\rAsia\r\r1982\r\r39.854\r\r12881816\r\r978.0114\r\r\r\rAfghanistan\r\rAsia\r\r1987\r\r40.822\r\r13867957\r\r852.3959\r\r\r\rAfghanistan\r\rAsia\r\r1992\r\r41.674\r\r16317921\r\r649.3414\r\r\r\rAfghanistan\r\rAsia\r\r1997\r\r41.763\r\r22227415\r\r635.3414\r\r\r\r\rSample Data\rYou’ll also see a toy data set for the introductory examples that start each section.\nsample_countries \u0026lt;- c(\u0026quot;Tunisia\u0026quot;, \u0026quot;Nicaragua\u0026quot;, \u0026quot;Singapore\u0026quot;, \u0026quot;Hungary\u0026quot;,\r\u0026quot;New Zealand\u0026quot;, \u0026quot;Nigeria\u0026quot;, \u0026quot;Brazil\u0026quot;, \u0026quot;Sri Lanka\u0026quot;,\r\u0026quot;Ireland\u0026quot;, \u0026quot;Australia\u0026quot;)\rsample_df \u0026lt;- gm_df %\u0026gt;%\rfilter(year == 2007,\rcountry %in% sample_countries)\rsample_df %\u0026gt;% prettify()\r\r\rcountry\r\rcontinent\r\ryear\r\rlifeExp\r\rpop\r\rgdpPercap\r\r\r\r\r\rAustralia\r\rOceania\r\r2007\r\r81.235\r\r20434176\r\r34435.367\r\r\r\rBrazil\r\rAmericas\r\r2007\r\r72.390\r\r190010647\r\r9065.801\r\r\r\rHungary\r\rEurope\r\r2007\r\r73.338\r\r9956108\r\r18008.944\r\r\r\rIreland\r\rEurope\r\r2007\r\r78.885\r\r4109086\r\r40675.996\r\r\r\rNew Zealand\r\rOceania\r\r2007\r\r80.204\r\r4115771\r\r25185.009\r\r\r\rNicaragua\r\rAmericas\r\r2007\r\r72.899\r\r5675356\r\r2749.321\r\r\r\rNigeria\r\rAfrica\r\r2007\r\r46.859\r\r135031164\r\r2013.977\r\r\r\rSingapore\r\rAsia\r\r2007\r\r79.972\r\r4553009\r\r47143.180\r\r\r\rSri Lanka\r\rAsia\r\r2007\r\r72.396\r\r20378239\r\r3970.095\r\r\r\rTunisia\r\rAfrica\r\r2007\r\r73.923\r\r10276158\r\r7092.923\r\r\r\r\r\r\r“Tidy” Data\rIf you’re unsure of what “Tidy” data is actually describing and want to learn more, you can read Hadley Wickham’s article here. Otherwise, these graphics are likely the most concise explanation you’ll find.\nWith tibbles, %\u0026gt;%, and the concept of tidy data covered, let’s take a dive.\n{dplyr}\r{dplyr} provides a grammar of data manipulation and a set of verb functions that solve most common data carpentry challenges in a consistent fashion.\n\rglimpse()\rselect()\rfilter()\rarrange()\rmutate()\rsummarize()\rgroup_by()\r\r\rTaking a glimpse()\rIn addition to the summary(), dim()ensions, and str()ucture functions that can be used to inspect data, you can now use {dplyr}’s glimpse().\nsummary(gm.data.frame)\r## country continent year lifeExp ## Afghanistan: 12 Africa :624 Min. :1952 Min. :23.60 ## Albania : 12 Americas:300 1st Qu.:1966 1st Qu.:48.20 ## Algeria : 12 Asia :396 Median :1980 Median :60.71 ## Angola : 12 Europe :360 Mean :1980 Mean :59.47 ## Argentina : 12 Oceania : 24 3rd Qu.:1993 3rd Qu.:70.85 ## Australia : 12 Max. :2007 Max. :82.60 ## (Other) :1632 ## pop gdpPercap ## Min. :6.001e+04 Min. : 241.2 ## 1st Qu.:2.794e+06 1st Qu.: 1202.1 ## Median :7.024e+06 Median : 3531.8 ## Mean :2.960e+07 Mean : 7215.3 ## 3rd Qu.:1.959e+07 3rd Qu.: 9325.5 ## Max. :1.319e+09 Max. :113523.1 ## \rdim(gm.data.frame)\r## [1] 1704 6\rstr(gm.data.frame)\r## \u0026#39;data.frame\u0026#39;: 1704 obs. of 6 variables:\r## $ country : Factor w/ 142 levels \u0026quot;Afghanistan\u0026quot;,..: 1 1 1 1 1 1 1 1 1 1 ...\r## $ continent: Factor w/ 5 levels \u0026quot;Africa\u0026quot;,\u0026quot;Americas\u0026quot;,..: 3 3 3 3 3 3 3 3 3 3 ...\r## $ year : int 1952 1957 1962 1967 1972 1977 1982 1987 1992 1997 ...\r## $ lifeExp : num 28.8 30.3 32 34 36.1 ...\r## $ pop : int 8425333 9240934 10267083 11537966 13079460 14880372 12881816 13867957 16317921 22227415 ...\r## $ gdpPercap: num 779 821 853 836 740 ...\rglimpse(gm_df)\r## Observations: 1,704\r## Variables: 6\r## $ country \u0026lt;fct\u0026gt; Afghanistan, Afghanistan, Afghanistan, Afghanistan, ...\r## $ continent \u0026lt;fct\u0026gt; Asia, Asia, Asia, Asia, Asia, Asia, Asia, Asia, Asia...\r## $ year \u0026lt;int\u0026gt; 1952, 1957, 1962, 1967, 1972, 1977, 1982, 1987, 1992...\r## $ lifeExp \u0026lt;dbl\u0026gt; 28.801, 30.332, 31.997, 34.020, 36.088, 38.438, 39.8...\r## $ pop \u0026lt;int\u0026gt; 8425333, 9240934, 10267083, 11537966, 13079460, 1488...\r## $ gdpPercap \u0026lt;dbl\u0026gt; 779.4453, 820.8530, 853.1007, 836.1971, 739.9811, 78...\r\r\rselect() columns\rQuick Example\rInitial Data\rsample_df %\u0026gt;%\rprettify()\r\r\rcountry\r\rcontinent\r\ryear\r\rlifeExp\r\rpop\r\rgdpPercap\r\r\r\r\r\rAustralia\r\rOceania\r\r2007\r\r81.235\r\r20434176\r\r34435.367\r\r\r\rBrazil\r\rAmericas\r\r2007\r\r72.390\r\r190010647\r\r9065.801\r\r\r\rHungary\r\rEurope\r\r2007\r\r73.338\r\r9956108\r\r18008.944\r\r\r\rIreland\r\rEurope\r\r2007\r\r78.885\r\r4109086\r\r40675.996\r\r\r\rNew Zealand\r\rOceania\r\r2007\r\r80.204\r\r4115771\r\r25185.009\r\r\r\rNicaragua\r\rAmericas\r\r2007\r\r72.899\r\r5675356\r\r2749.321\r\r\r\rNigeria\r\rAfrica\r\r2007\r\r46.859\r\r135031164\r\r2013.977\r\r\r\rSingapore\r\rAsia\r\r2007\r\r79.972\r\r4553009\r\r47143.180\r\r\r\rSri Lanka\r\rAsia\r\r2007\r\r72.396\r\r20378239\r\r3970.095\r\r\r\rTunisia\r\rAfrica\r\r2007\r\r73.923\r\r10276158\r\r7092.923\r\r\r\r\r\rEnd Data\rsample_df %\u0026gt;%\rselect(country, pop) %\u0026gt;%\rprettify()\r\r\rcountry\r\rpop\r\r\r\r\r\rAustralia\r\r20434176\r\r\r\rBrazil\r\r190010647\r\r\r\rHungary\r\r9956108\r\r\r\rIreland\r\r4109086\r\r\r\rNew Zealand\r\r4115771\r\r\r\rNicaragua\r\r5675356\r\r\r\rNigeria\r\r135031164\r\r\r\rSingapore\r\r4553009\r\r\r\rSri Lanka\r\r20378239\r\r\r\rTunisia\r\r10276158\r\r\r\r\rThe select() family is used to choose columns to keep. You can use bare (unquoted) names.\n\rselect() columns by specific names.\r\rselect only gm_df’s country and pop columns\r\r\rgm_df %\u0026gt;%\rselect(country, year, pop) %\u0026gt;% # select columns by specific names\rprettify()\r\r\rcountry\r\ryear\r\rpop\r\r\r\r\r\rAfghanistan\r\r1952\r\r8425333\r\r\r\rAfghanistan\r\r1957\r\r9240934\r\r\r\rAfghanistan\r\r1962\r\r10267083\r\r\r\rAfghanistan\r\r1967\r\r11537966\r\r\r\rAfghanistan\r\r1972\r\r13079460\r\r\r\rAfghanistan\r\r1977\r\r14880372\r\r\r\rAfghanistan\r\r1982\r\r12881816\r\r\r\rAfghanistan\r\r1987\r\r13867957\r\r\r\rAfghanistan\r\r1992\r\r16317921\r\r\r\rAfghanistan\r\r1997\r\r22227415\r\r\r\r\r\rselect() a range of columns by name\r\rselect gm_df’s continent column and all columns from lifeExp to gdpPercap\r\r\rgm_df %\u0026gt;%\rselect(continent, lifeExp:gdpPercap) %\u0026gt;% # select columns name range\rprettify()\r\r\rcontinent\r\rlifeExp\r\rpop\r\rgdpPercap\r\r\r\r\r\rAsia\r\r28.801\r\r8425333\r\r779.4453\r\r\r\rAsia\r\r30.332\r\r9240934\r\r820.8530\r\r\r\rAsia\r\r31.997\r\r10267083\r\r853.1007\r\r\r\rAsia\r\r34.020\r\r11537966\r\r836.1971\r\r\r\rAsia\r\r36.088\r\r13079460\r\r739.9811\r\r\r\rAsia\r\r38.438\r\r14880372\r\r786.1134\r\r\r\rAsia\r\r39.854\r\r12881816\r\r978.0114\r\r\r\rAsia\r\r40.822\r\r13867957\r\r852.3959\r\r\r\rAsia\r\r41.674\r\r16317921\r\r649.3414\r\r\r\rAsia\r\r41.763\r\r22227415\r\r635.3414\r\r\r\r\r\rdeselect() a column with -\r\rselect() all of gm_df’s columns except lifeExp\r\r\rgm_df %\u0026gt;%\rselect(-lifeExp) %\u0026gt;% # deselect column by name\rprettify()\r\r\rcountry\r\rcontinent\r\ryear\r\rpop\r\rgdpPercap\r\r\r\r\r\rAfghanistan\r\rAsia\r\r1952\r\r8425333\r\r779.4453\r\r\r\rAfghanistan\r\rAsia\r\r1957\r\r9240934\r\r820.8530\r\r\r\rAfghanistan\r\rAsia\r\r1962\r\r10267083\r\r853.1007\r\r\r\rAfghanistan\r\rAsia\r\r1967\r\r11537966\r\r836.1971\r\r\r\rAfghanistan\r\rAsia\r\r1972\r\r13079460\r\r739.9811\r\r\r\rAfghanistan\r\rAsia\r\r1977\r\r14880372\r\r786.1134\r\r\r\rAfghanistan\r\rAsia\r\r1982\r\r12881816\r\r978.0114\r\r\r\rAfghanistan\r\rAsia\r\r1987\r\r13867957\r\r852.3959\r\r\r\rAfghanistan\r\rAsia\r\r1992\r\r16317921\r\r649.3414\r\r\r\rAfghanistan\r\rAsia\r\r1997\r\r22227415\r\r635.3414\r\r\r\r\r\rdeselect() a range of columns by name\r\rselect() all of gm_df’s columns except those between lifeExp and gdpPercap\r\r\rgm_df %\u0026gt;%\rselect(-c(lifeExp:gdpPercap)) %\u0026gt;% # deselect column by name range\rprettify()\r\r\rcountry\r\rcontinent\r\ryear\r\r\r\r\r\rAfghanistan\r\rAsia\r\r1952\r\r\r\rAfghanistan\r\rAsia\r\r1957\r\r\r\rAfghanistan\r\rAsia\r\r1962\r\r\r\rAfghanistan\r\rAsia\r\r1967\r\r\r\rAfghanistan\r\rAsia\r\r1972\r\r\r\rAfghanistan\r\rAsia\r\r1977\r\r\r\rAfghanistan\r\rAsia\r\r1982\r\r\r\rAfghanistan\r\rAsia\r\r1987\r\r\r\rAfghanistan\r\rAsia\r\r1992\r\r\r\rAfghanistan\r\rAsia\r\r1997\r\r\r\r\r\rselect() column by index\r\rselect() gm_df’s 4th column\r\r\rgm_df %\u0026gt;%\rselect(4) %\u0026gt;% # select column by index\rprettify()\r\r\rlifeExp\r\r\r\r\r\r28.801\r\r\r\r30.332\r\r\r\r31.997\r\r\r\r34.020\r\r\r\r36.088\r\r\r\r38.438\r\r\r\r39.854\r\r\r\r40.822\r\r\r\r41.674\r\r\r\r41.763\r\r\r\r\r\rdeselect() a column by index\r\rselect() all of gm_df’s columns except for the 4th column\r\r\rgm_df %\u0026gt;%\rselect(-4) %\u0026gt;% # deselect column by index\rprettify()\r\r\rcountry\r\rcontinent\r\ryear\r\rpop\r\rgdpPercap\r\r\r\r\r\rAfghanistan\r\rAsia\r\r1952\r\r8425333\r\r779.4453\r\r\r\rAfghanistan\r\rAsia\r\r1957\r\r9240934\r\r820.8530\r\r\r\rAfghanistan\r\rAsia\r\r1962\r\r10267083\r\r853.1007\r\r\r\rAfghanistan\r\rAsia\r\r1967\r\r11537966\r\r836.1971\r\r\r\rAfghanistan\r\rAsia\r\r1972\r\r13079460\r\r739.9811\r\r\r\rAfghanistan\r\rAsia\r\r1977\r\r14880372\r\r786.1134\r\r\r\rAfghanistan\r\rAsia\r\r1982\r\r12881816\r\r978.0114\r\r\r\rAfghanistan\r\rAsia\r\r1987\r\r13867957\r\r852.3959\r\r\r\rAfghanistan\r\rAsia\r\r1992\r\r16317921\r\r649.3414\r\r\r\rAfghanistan\r\rAsia\r\r1997\r\r22227415\r\r635.3414\r\r\r\r\r\rdeselect() a range of columns by index\r\rselect() all of gm_df’s columns except those between the 3rd and 5th columns\r\r\rgm_df %\u0026gt;%\rselect(-c(3:5)) %\u0026gt;% # deselect columns by index range\rprettify()\r\r\rcountry\r\rcontinent\r\rgdpPercap\r\r\r\r\r\rAfghanistan\r\rAsia\r\r779.4453\r\r\r\rAfghanistan\r\rAsia\r\r820.8530\r\r\r\rAfghanistan\r\rAsia\r\r853.1007\r\r\r\rAfghanistan\r\rAsia\r\r836.1971\r\r\r\rAfghanistan\r\rAsia\r\r739.9811\r\r\r\rAfghanistan\r\rAsia\r\r786.1134\r\r\r\rAfghanistan\r\rAsia\r\r978.0114\r\r\r\rAfghanistan\r\rAsia\r\r852.3959\r\r\r\rAfghanistan\r\rAsia\r\r649.3414\r\r\r\rAfghanistan\r\rAsia\r\r635.3414\r\r\r\r\r\r\rggplot() Exercise 1\r{ggplot2} is monster of a package used for data visualization that follows The Grammar of Graphics.\n{ggplot2} takes R’s powerful graphics capabilities and makes them more accessible by taking care of many plotting tasks that are often tedious, while still allowing for lower-level customization.\n\rBasic Setup\r\rggplot(your data, aes(x =x values, y =y values)) + geom_boxplot() the type of plot geometry desired\nSteps\nUsing gm_df, select the lifeExp column\rPipe (%\u0026gt;%) the result to ggplot()\rSelect the plot’s aes()thetic values\r\rlifeExp for the x values\r\ra histogram’s y are counts of its x values, so we don’t provide them here\r\r\rAdd geom_histogram() as the geometry of the plot\r\rgm_df %\u0026gt;% # data frame: Data\rselect(lifeExp) %\u0026gt;% # columns to keep: Data\rggplot(aes(x = lifeExp)) + # x values: Aesthetics\rgeom_histogram() # histogram: Geometries\r\rFigure 1: Figure 1\r\r\r\rfilter() Rows\rQuick Example\rInitial Data\rsample_df %\u0026gt;%\rselect(country, lifeExp) %\u0026gt;%\rprettify()\r\r\rcountry\r\rlifeExp\r\r\r\r\r\rAustralia\r\r81.235\r\r\r\rBrazil\r\r72.390\r\r\r\rHungary\r\r73.338\r\r\r\rIreland\r\r78.885\r\r\r\rNew Zealand\r\r80.204\r\r\r\rNicaragua\r\r72.899\r\r\r\rNigeria\r\r46.859\r\r\r\rSingapore\r\r79.972\r\r\r\rSri Lanka\r\r72.396\r\r\r\rTunisia\r\r73.923\r\r\r\r\r\rEnd Data\rsample_df %\u0026gt;%\rselect(country, lifeExp) %\u0026gt;%\rfilter(lifeExp \u0026gt; 75) %\u0026gt;%\rprettify(cols_changed = 2)\r\r\rcountry\r\rlifeExp\r\r\r\r\r\rAustralia\r\r81.235\r\r\r\rIreland\r\r78.885\r\r\r\rNew Zealand\r\r80.204\r\r\r\rSingapore\r\r79.972\r\r\r\r\rUse filter() to select rows using logic. Rows where a logical expression returns TRUE are kept and others are dropped.\n\rfilter() rows where numeric() values are greater or lesser than another value\r\rfilter() gm_df to only keep rows where gdpPercap \u0026lt; 500\r\r\rgm_df %\u0026gt;%\rfilter(gdpPercap \u0026lt; 500) %\u0026gt;%\rprettify(cols_changed = 6)\r\r\rcountry\r\rcontinent\r\ryear\r\rlifeExp\r\rpop\r\rgdpPercap\r\r\r\r\r\rBurundi\r\rAfrica\r\r1952\r\r39.031\r\r2445618\r\r339.2965\r\r\r\rBurundi\r\rAfrica\r\r1957\r\r40.533\r\r2667518\r\r379.5646\r\r\r\rBurundi\r\rAfrica\r\r1962\r\r42.045\r\r2961915\r\r355.2032\r\r\r\rBurundi\r\rAfrica\r\r1967\r\r43.548\r\r3330989\r\r412.9775\r\r\r\rBurundi\r\rAfrica\r\r1972\r\r44.057\r\r3529983\r\r464.0995\r\r\r\rBurundi\r\rAfrica\r\r1997\r\r45.326\r\r6121610\r\r463.1151\r\r\r\rBurundi\r\rAfrica\r\r2002\r\r47.360\r\r7021078\r\r446.4035\r\r\r\rBurundi\r\rAfrica\r\r2007\r\r49.580\r\r8390505\r\r430.0707\r\r\r\rCambodia\r\rAsia\r\r1952\r\r39.417\r\r4693836\r\r368.4693\r\r\r\rCambodia\r\rAsia\r\r1957\r\r41.366\r\r5322536\r\r434.0383\r\r\r\r\r\rfilter() rows using multiple logical expressions where all must be TRUE\r\rfilter() gm_df to only keep rows where year \u0026gt; 1990 and lifeExp \u0026lt; 40\r, and \u0026amp; are evaluated identically in filter()\r\r\rgm_df %\u0026gt;%\rfilter(year \u0026gt; 1990, lifeExp \u0026lt; 40) %\u0026gt;%\rprettify(cols_changed = 3:4)\r\r\rcountry\r\rcontinent\r\ryear\r\rlifeExp\r\rpop\r\rgdpPercap\r\r\r\r\r\rRwanda\r\rAfrica\r\r1992\r\r23.599\r\r7290203\r\r737.0686\r\r\r\rRwanda\r\rAfrica\r\r1997\r\r36.087\r\r7212583\r\r589.9445\r\r\r\rSierra Leone\r\rAfrica\r\r1992\r\r38.333\r\r4260884\r\r1068.6963\r\r\r\rSierra Leone\r\rAfrica\r\r1997\r\r39.897\r\r4578212\r\r574.6482\r\r\r\rSomalia\r\rAfrica\r\r1992\r\r39.658\r\r6099799\r\r926.9603\r\r\r\rSwaziland\r\rAfrica\r\r2007\r\r39.613\r\r1133066\r\r4513.4806\r\r\r\rZambia\r\rAfrica\r\r2002\r\r39.193\r\r10595811\r\r1071.6139\r\r\r\rZimbabwe\r\rAfrica\r\r2002\r\r39.989\r\r11926563\r\r672.0386\r\r\r\r\r\rfilter() rows using multiple logical expressions where one must be TRUE\r\rfilter() gm_df to only keep rows where pop \u0026lt; 10000 or gdpPercap \u0026gt; 100000\r| means or\r\r\rgm_df %\u0026gt;%\rfilter(pop \u0026lt; 10000 | gdpPercap \u0026gt; 100000) %\u0026gt;%\rprettify(cols_changed = 5:6)\r\r\rcountry\r\rcontinent\r\ryear\r\rlifeExp\r\rpop\r\rgdpPercap\r\r\r\r\r\rKuwait\r\rAsia\r\r1952\r\r55.565\r\r160000\r\r108382.4\r\r\r\rKuwait\r\rAsia\r\r1957\r\r58.033\r\r212846\r\r113523.1\r\r\r\rKuwait\r\rAsia\r\r1972\r\r67.712\r\r841934\r\r109347.9\r\r\r\r\r\rfilter() rows using a string\r\rfilter() gm_df to only keep rows where year is 1999 and continent is \u0026quot;Europe\u0026quot;\r== means is equal to\r\r\rgm_df %\u0026gt;%\rfilter(year == 1997 \u0026amp; continent == \u0026quot;Europe\u0026quot;) %\u0026gt;%\rprettify(cols_changed = 2:3)\r\r\rcountry\r\rcontinent\r\ryear\r\rlifeExp\r\rpop\r\rgdpPercap\r\r\r\r\r\rAlbania\r\rEurope\r\r1997\r\r72.950\r\r3428038\r\r3193.055\r\r\r\rAustria\r\rEurope\r\r1997\r\r77.510\r\r8069876\r\r29095.921\r\r\r\rBelgium\r\rEurope\r\r1997\r\r77.530\r\r10199787\r\r27561.197\r\r\r\rBosnia and Herzegovina\r\rEurope\r\r1997\r\r73.244\r\r3607000\r\r4766.356\r\r\r\rBulgaria\r\rEurope\r\r1997\r\r70.320\r\r8066057\r\r5970.389\r\r\r\rCroatia\r\rEurope\r\r1997\r\r73.680\r\r4444595\r\r9875.605\r\r\r\rCzech Republic\r\rEurope\r\r1997\r\r74.010\r\r10300707\r\r16048.514\r\r\r\rDenmark\r\rEurope\r\r1997\r\r76.110\r\r5283663\r\r29804.346\r\r\r\rFinland\r\rEurope\r\r1997\r\r77.130\r\r5134406\r\r23723.950\r\r\r\rFrance\r\rEurope\r\r1997\r\r78.640\r\r58623428\r\r25889.785\r\r\r\r\r\r\rggplot() Exercise 2\rSteps\nUsing gm_df, select the continent, country, and gdpPercap columns\rfilter() the rows to only keep those where continent == \u0026quot;Oceania\u0026quot;\rPipe (%\u0026gt;%) the result to ggplot()\rSelect the plot’s aes()thetic values\r\rcountry for the x values\rgdpPercap for the y values\r\rAdd geom_boxplot() as the geometry of the plot\r\rgm_df %\u0026gt;% # data frame: Data\rselect(continent, country, gdpPercap) %\u0026gt;% # columns to keep: Data\rfilter(continent == \u0026quot;Oceania\u0026quot;) %\u0026gt;% # rows to keep: Data\rggplot(aes(x = country, y = gdpPercap)) + # x and y values: Aesthetics\rgeom_boxplot() # box plot: Geometries\r\r\rmutate() Columns\rQuick Example\rInitial Data\rsample_df %\u0026gt;%\rselect(country, pop) %\u0026gt;%\rprettify()\r\r\rcountry\r\rpop\r\r\r\r\r\rAustralia\r\r20434176\r\r\r\rBrazil\r\r190010647\r\r\r\rHungary\r\r9956108\r\r\r\rIreland\r\r4109086\r\r\r\rNew Zealand\r\r4115771\r\r\r\rNicaragua\r\r5675356\r\r\r\rNigeria\r\r135031164\r\r\r\rSingapore\r\r4553009\r\r\r\rSri Lanka\r\r20378239\r\r\r\rTunisia\r\r10276158\r\r\r\r\r\rEnd Data\rsample_df %\u0026gt;%\rselect(country, pop) %\u0026gt;%\rmutate(pop_in_thousands = pop / 1000) %\u0026gt;%\rprettify(cols_changed = 3)\r\r\rcountry\r\rpop\r\rpop_in_thousands\r\r\r\r\r\rAustralia\r\r20434176\r\r20434.176\r\r\r\rBrazil\r\r190010647\r\r190010.647\r\r\r\rHungary\r\r9956108\r\r9956.108\r\r\r\rIreland\r\r4109086\r\r4109.086\r\r\r\rNew Zealand\r\r4115771\r\r4115.771\r\r\r\rNicaragua\r\r5675356\r\r5675.356\r\r\r\rNigeria\r\r135031164\r\r135031.164\r\r\r\rSingapore\r\r4553009\r\r4553.009\r\r\r\rSri Lanka\r\r20378239\r\r20378.239\r\r\r\rTunisia\r\r10276158\r\r10276.158\r\r\r\r\rUse mutate() to manipulate column values and create new columns.\nIn order to mutate() a column, use the name of the column you are manipulating and set its value using =.\nHere’s a silly example:\n\rAdd a new column to gm_df\r\rmutate() gm_df to create a column named planet and set its value to \u0026quot;Earth\u0026quot;\r\r\rgm_df %\u0026gt;%\rmutate(planet = \u0026quot;Earth\u0026quot;) %\u0026gt;%\rprettify(cols_changed = 7)\r\r\rcountry\r\rcontinent\r\ryear\r\rlifeExp\r\rpop\r\rgdpPercap\r\rplanet\r\r\r\r\r\rAfghanistan\r\rAsia\r\r1952\r\r28.801\r\r8425333\r\r779.4453\r\rEarth\r\r\r\rAfghanistan\r\rAsia\r\r1957\r\r30.332\r\r9240934\r\r820.8530\r\rEarth\r\r\r\rAfghanistan\r\rAsia\r\r1962\r\r31.997\r\r10267083\r\r853.1007\r\rEarth\r\r\r\rAfghanistan\r\rAsia\r\r1967\r\r34.020\r\r11537966\r\r836.1971\r\rEarth\r\r\r\rAfghanistan\r\rAsia\r\r1972\r\r36.088\r\r13079460\r\r739.9811\r\rEarth\r\r\r\rAfghanistan\r\rAsia\r\r1977\r\r38.438\r\r14880372\r\r786.1134\r\rEarth\r\r\r\rAfghanistan\r\rAsia\r\r1982\r\r39.854\r\r12881816\r\r978.0114\r\rEarth\r\r\r\rAfghanistan\r\rAsia\r\r1987\r\r40.822\r\r13867957\r\r852.3959\r\rEarth\r\r\r\rAfghanistan\r\rAsia\r\r1992\r\r41.674\r\r16317921\r\r649.3414\r\rEarth\r\r\r\rAfghanistan\r\rAsia\r\r1997\r\r41.763\r\r22227415\r\r635.3414\r\rEarth\r\r\r\r\rSince we have gdpPercap and pop, we can calculate the values for a total_GDP column.\n\rmutate() gm_df to set the results of a calculation on each row to a new column\r\rmultiply pop * gdpPercap and assign the result to total_GDP inside mutate()\r\r\rgm_df %\u0026gt;%\rmutate(total_GDP = pop * gdpPercap) %\u0026gt;%\rprettify(cols_changed = 7)\r\r\rcountry\r\rcontinent\r\ryear\r\rlifeExp\r\rpop\r\rgdpPercap\r\rtotal_GDP\r\r\r\r\r\rAfghanistan\r\rAsia\r\r1952\r\r28.801\r\r8425333\r\r779.4453\r\r6567086330\r\r\r\rAfghanistan\r\rAsia\r\r1957\r\r30.332\r\r9240934\r\r820.8530\r\r7585448670\r\r\r\rAfghanistan\r\rAsia\r\r1962\r\r31.997\r\r10267083\r\r853.1007\r\r8758855797\r\r\r\rAfghanistan\r\rAsia\r\r1967\r\r34.020\r\r11537966\r\r836.1971\r\r9648014150\r\r\r\rAfghanistan\r\rAsia\r\r1972\r\r36.088\r\r13079460\r\r739.9811\r\r9678553274\r\r\r\rAfghanistan\r\rAsia\r\r1977\r\r38.438\r\r14880372\r\r786.1134\r\r11697659231\r\r\r\rAfghanistan\r\rAsia\r\r1982\r\r39.854\r\r12881816\r\r978.0114\r\r12598563401\r\r\r\rAfghanistan\r\rAsia\r\r1987\r\r40.822\r\r13867957\r\r852.3959\r\r11820990309\r\r\r\rAfghanistan\r\rAsia\r\r1992\r\r41.674\r\r16317921\r\r649.3414\r\r10595901589\r\r\r\rAfghanistan\r\rAsia\r\r1997\r\r41.763\r\r22227415\r\r635.3414\r\r14121995875\r\r\r\r\rTypically, mutate() is used to perform operations across columns in each individual row. You can also use summary functions to perform operations on individual columns (acting as vectors) that result in a vector that can be assigned to a column.\nMakes sense, right??\nLet’s calculate the z-score of each gdpPercap value for a specific year.\n\\[ z = \\frac {x_i -\\mu_x} {\\sigma_x}\\]\n\r\\(x\\) = gdpPercap\r\\(\\mu_x\\) = the mean of \\(x\\) = mean(gdpPercap)\r\\(\\sigma_x\\) = the standard deviation of x = sd(gdpPercap)\n\rUse a summary function to perform a a calculation involving summary statistics of a column\r\rsubtract mean(gdpPercap) from gdpPercap\rdivide the result by sd(gdpPercap)\rset the results as the values of a new column called gdp_per_cap_z_score\r\r\rgm_df %\u0026gt;%\rfilter(year == 1977) %\u0026gt;%\rmutate(gdp_per_cap_z_score = (gdpPercap - mean(gdpPercap)) / sd(gdpPercap)) %\u0026gt;%\rprettify(cols_changed = 7)\r\r\rcountry\r\rcontinent\r\ryear\r\rlifeExp\r\rpop\r\rgdpPercap\r\rgdp_per_cap_z_score\r\r\r\r\r\rAfghanistan\r\rAsia\r\r1977\r\r38.438\r\r14880372\r\r786.1134\r\r-0.7805156\r\r\r\rAlbania\r\rEurope\r\r1977\r\r68.930\r\r2509048\r\r3533.0039\r\r-0.4520380\r\r\r\rAlgeria\r\rAfrica\r\r1977\r\r58.014\r\r17152804\r\r4910.4168\r\r-0.2873247\r\r\r\rAngola\r\rAfrica\r\r1977\r\r39.483\r\r6162675\r\r3008.6474\r\r-0.5147414\r\r\r\rArgentina\r\rAmericas\r\r1977\r\r68.481\r\r26983828\r\r10079.0267\r\r0.3307461\r\r\r\rAustralia\r\rOceania\r\r1977\r\r73.490\r\r14074100\r\r18334.1975\r\r1.3179128\r\r\r\rAustria\r\rEurope\r\r1977\r\r72.170\r\r7568430\r\r19749.4223\r\r1.4871476\r\r\r\rBahrain\r\rAsia\r\r1977\r\r65.593\r\r297410\r\r19340.1020\r\r1.4382004\r\r\r\rBangladesh\r\rAsia\r\r1977\r\r46.923\r\r80428306\r\r659.8772\r\r-0.7956111\r\r\r\rBelgium\r\rEurope\r\r1977\r\r72.800\r\r9821800\r\r19117.9745\r\r1.4116381\r\r\r\r\rHere are other functions that can be used similarly:\n\r\rSummary Functions\r\r\r\r\rfirst()\rmin()\r\rlast()\rmax()\r\rnth()\rmean()\r\rn()\rmedian()\r\rn_distinct()\rvar()\r\rIQR()\rsd()\r\r\r\r\r\rggplot() Exercise 3\rSteps\nUsing gm_df, select() country, year, and gdpPercap\rfilter() the rows to keep only those where country is \u0026quot;Korea, Rep.\u0026quot;, \u0026quot;Korea, Dem. Rep.\u0026quot;, \u0026quot;Japan\u0026quot;, or \u0026quot;China\u0026quot;\rPipe the result to ggplot()\rSelect the plot’s aes()thetic values\r\ryear for the x values\rgdpPercap for the y values\rcountry for the color values\r\r\r\rAdd geom_line() as the geometry of the plot\rAdd a title to the plot with labs()\r\rgm_df %\u0026gt;%\rfilter(country %in% c(\u0026quot;Korea, Rep.\u0026quot;, \u0026quot;Korea, Dem. Rep.\u0026quot;, \u0026quot;Japan\u0026quot;, \u0026quot;China\u0026quot;)) %\u0026gt;%\rmutate(total_GDP = pop * gdpPercap) %\u0026gt;%\rggplot(aes(x = year, y = gdpPercap, color = country)) +\rgeom_line() +\rlabs(title = \u0026quot;GDP Over Time\u0026quot;)\r\r\rarrange() Rows\rQuick Example\rInitial Data\rsample_df %\u0026gt;%\rselect(country, gdpPercap) %\u0026gt;%\rprettify()\r\r\rcountry\r\rgdpPercap\r\r\r\r\r\rAustralia\r\r34435.367\r\r\r\rBrazil\r\r9065.801\r\r\r\rHungary\r\r18008.944\r\r\r\rIreland\r\r40675.996\r\r\r\rNew Zealand\r\r25185.009\r\r\r\rNicaragua\r\r2749.321\r\r\r\rNigeria\r\r2013.977\r\r\r\rSingapore\r\r47143.180\r\r\r\rSri Lanka\r\r3970.095\r\r\r\rTunisia\r\r7092.923\r\r\r\r\r\rEnd Data\rsample_df %\u0026gt;%\rselect(country, gdpPercap)%\u0026gt;%\rarrange(gdpPercap) %\u0026gt;%\rprettify(cols_changed = 2)\r\r\rcountry\r\rgdpPercap\r\r\r\r\r\rNigeria\r\r2013.977\r\r\r\rNicaragua\r\r2749.321\r\r\r\rSri Lanka\r\r3970.095\r\r\r\rTunisia\r\r7092.923\r\r\r\rBrazil\r\r9065.801\r\r\r\rHungary\r\r18008.944\r\r\r\rNew Zealand\r\r25185.009\r\r\r\rAustralia\r\r34435.367\r\r\r\rIreland\r\r40675.996\r\r\r\rSingapore\r\r47143.180\r\r\r\r\rUse arrange() to sort rows.\n\rarrange() by ascending number (smallest to largest)\r\rarrange() gm_df’s pop column so that smallest populations are on top\r\r\rgm_df %\u0026gt;%\rarrange(pop) %\u0026gt;%\rprettify(cols_changed = 5)\r\r\rcountry\r\rcontinent\r\ryear\r\rlifeExp\r\rpop\r\rgdpPercap\r\r\r\r\r\rSao Tome and Principe\r\rAfrica\r\r1952\r\r46.471\r\r60011\r\r879.5836\r\r\r\rSao Tome and Principe\r\rAfrica\r\r1957\r\r48.945\r\r61325\r\r860.7369\r\r\r\rDjibouti\r\rAfrica\r\r1952\r\r34.812\r\r63149\r\r2669.5295\r\r\r\rSao Tome and Principe\r\rAfrica\r\r1962\r\r51.893\r\r65345\r\r1071.5511\r\r\r\rSao Tome and Principe\r\rAfrica\r\r1967\r\r54.425\r\r70787\r\r1384.8406\r\r\r\rDjibouti\r\rAfrica\r\r1957\r\r37.328\r\r71851\r\r2864.9691\r\r\r\rSao Tome and Principe\r\rAfrica\r\r1972\r\r56.480\r\r76595\r\r1532.9853\r\r\r\rSao Tome and Principe\r\rAfrica\r\r1977\r\r58.550\r\r86796\r\r1737.5617\r\r\r\rDjibouti\r\rAfrica\r\r1962\r\r39.693\r\r89898\r\r3020.9893\r\r\r\rSao Tome and Principe\r\rAfrica\r\r1982\r\r60.351\r\r98593\r\r1890.2181\r\r\r\r\r\rarrange() by desc() number (largest to smallest)\r\rarrange() the lifeExp column so that largest values are on top\r\r\rgm_df %\u0026gt;%\rarrange(desc(lifeExp)) %\u0026gt;%\rprettify(cols_changed = 4)\r\r\rcountry\r\rcontinent\r\ryear\r\rlifeExp\r\rpop\r\rgdpPercap\r\r\r\r\r\rJapan\r\rAsia\r\r2007\r\r82.603\r\r127467972\r\r31656.07\r\r\r\rHong Kong, China\r\rAsia\r\r2007\r\r82.208\r\r6980412\r\r39724.98\r\r\r\rJapan\r\rAsia\r\r2002\r\r82.000\r\r127065841\r\r28604.59\r\r\r\rIceland\r\rEurope\r\r2007\r\r81.757\r\r301931\r\r36180.79\r\r\r\rSwitzerland\r\rEurope\r\r2007\r\r81.701\r\r7554661\r\r37506.42\r\r\r\rHong Kong, China\r\rAsia\r\r2002\r\r81.495\r\r6762476\r\r30209.02\r\r\r\rAustralia\r\rOceania\r\r2007\r\r81.235\r\r20434176\r\r34435.37\r\r\r\rSpain\r\rEurope\r\r2007\r\r80.941\r\r40448191\r\r28821.06\r\r\r\rSweden\r\rEurope\r\r2007\r\r80.884\r\r9031088\r\r33859.75\r\r\r\rIsrael\r\rAsia\r\r2007\r\r80.745\r\r6426679\r\r25523.28\r\r\r\r\r\rarrange() alphabetically\r\rfilter() gm_df to keep only those rows where year == 2007 and continent == \u0026quot;Americas\u0026quot;\rarrange() the country column alphabetically\r\r\rgm_df %\u0026gt;%\rfilter(year == 2007, continent == \u0026quot;Americas\u0026quot;) %\u0026gt;%\rarrange(country) %\u0026gt;%\rprettify(cols_changed = 2:3)\r\r\rcountry\r\rcontinent\r\ryear\r\rlifeExp\r\rpop\r\rgdpPercap\r\r\r\r\r\rArgentina\r\rAmericas\r\r2007\r\r75.320\r\r40301927\r\r12779.380\r\r\r\rBolivia\r\rAmericas\r\r2007\r\r65.554\r\r9119152\r\r3822.137\r\r\r\rBrazil\r\rAmericas\r\r2007\r\r72.390\r\r190010647\r\r9065.801\r\r\r\rCanada\r\rAmericas\r\r2007\r\r80.653\r\r33390141\r\r36319.235\r\r\r\rChile\r\rAmericas\r\r2007\r\r78.553\r\r16284741\r\r13171.639\r\r\r\rColombia\r\rAmericas\r\r2007\r\r72.889\r\r44227550\r\r7006.580\r\r\r\rCosta Rica\r\rAmericas\r\r2007\r\r78.782\r\r4133884\r\r9645.061\r\r\r\rCuba\r\rAmericas\r\r2007\r\r78.273\r\r11416987\r\r8948.103\r\r\r\rDominican Republic\r\rAmericas\r\r2007\r\r72.235\r\r9319622\r\r6025.375\r\r\r\rEcuador\r\rAmericas\r\r2007\r\r74.994\r\r13755680\r\r6873.262\r\r\r\r\r\r\r\rgroup_by() for Grouped Data\rQuick Example\rInitial Data\rsample_df %\u0026gt;%\rselect(country, continent, pop) %\u0026gt;%\rprettify()\r\r\rcountry\r\rcontinent\r\rpop\r\r\r\r\r\rAustralia\r\rOceania\r\r20434176\r\r\r\rBrazil\r\rAmericas\r\r190010647\r\r\r\rHungary\r\rEurope\r\r9956108\r\r\r\rIreland\r\rEurope\r\r4109086\r\r\r\rNew Zealand\r\rOceania\r\r4115771\r\r\r\rNicaragua\r\rAmericas\r\r5675356\r\r\r\rNigeria\r\rAfrica\r\r135031164\r\r\r\rSingapore\r\rAsia\r\r4553009\r\r\r\rSri Lanka\r\rAsia\r\r20378239\r\r\r\rTunisia\r\rAfrica\r\r10276158\r\r\r\r\r\rEnd Data\rsample_df %\u0026gt;%\rselect(country, continent, pop) %\u0026gt;%\rgroup_by(continent) %\u0026gt;%\rmutate(pop_by_continent = sum(pop)) %\u0026gt;%\rungroup() %\u0026gt;%\rarrange(pop_by_continent) %\u0026gt;%\rprettify(cols_changed = 4)\r\r\rcountry\r\rcontinent\r\rpop\r\rpop_by_continent\r\r\r\r\r\rHungary\r\rEurope\r\r9956108\r\r14065194\r\r\r\rIreland\r\rEurope\r\r4109086\r\r14065194\r\r\r\rAustralia\r\rOceania\r\r20434176\r\r24549947\r\r\r\rNew Zealand\r\rOceania\r\r4115771\r\r24549947\r\r\r\rSingapore\r\rAsia\r\r4553009\r\r24931248\r\r\r\rSri Lanka\r\rAsia\r\r20378239\r\r24931248\r\r\r\rNigeria\r\rAfrica\r\r135031164\r\r145307322\r\r\r\rTunisia\r\rAfrica\r\r10276158\r\r145307322\r\r\r\rBrazil\r\rAmericas\r\r190010647\r\r195686003\r\r\r\rNicaragua\r\rAmericas\r\r5675356\r\r195686003\r\r\r\r\rgroup_by() allows us to group rows together based on column values.\nLet’s say we wanted to compute summary values for each country for all years.\n\rCalculate the mean_gdp_per_cap of each country with group_by()\r\rtake gm_df and group_by() country to group rows of the same country together\ruse mean() to calculate the mean_gdp_per_cap\rungroup() the rows\r\ra habit you want\r\rkeep only those rows with distinct() combinations of country and mean_gdp_per_cap\r\rdistinct()’s default is to only keep columns used as arguments\r\r\r\rgm_df %\u0026gt;%\rgroup_by(country) %\u0026gt;%\rmutate(mean_gdp_per_cap = median(gdpPercap)) %\u0026gt;% ungroup() %\u0026gt;%\rdistinct(country, mean_gdp_per_cap) %\u0026gt;% prettify(cols_changed = 2)\r\r\rcountry\r\rmean_gdp_per_cap\r\r\r\r\r\rAfghanistan\r\r803.4832\r\r\r\rAlbania\r\r3253.2384\r\r\r\rAlgeria\r\r4853.8559\r\r\r\rAngola\r\r3264.6288\r\r\r\rArgentina\r\r9068.7844\r\r\r\rAustralia\r\r18905.6034\r\r\r\rAustria\r\r20673.2530\r\r\r\rBahrain\r\r18779.8016\r\r\r\rBangladesh\r\r703.7638\r\r\r\rBelgium\r\r20048.9102\r\r\r\r\r\r\rggplot() Exercise 4\rSteps\nUsing gm_df, group_by() the continent and year\rmutate() to add a column called mean_gdp for the average GDP of each continent\rungroup() the data, because this is a habit that will save you headaches later\rKeep only distinct() combinations of continent, year, and mean_gdp\rPipe the result to ggplot()\rSelect the plot’s aes()thetic values\r\ryear for the x values\rmean_gdp for the y values\rcontinent for the color values\r\rAdd geom_line() as the geometry of the plot\rAdd a title and a caption (for the source of the data) to the plot with labs()\r\rgm_df %\u0026gt;%\rgroup_by(year, continent) %\u0026gt;%\rmutate(mean_gdp = mean(gdpPercap)) %\u0026gt;%\rungroup() %\u0026gt;%\rdistinct(continent, year, mean_gdp) %\u0026gt;%\rggplot(aes(x = year, y = mean_gdp, color = continent)) +\rgeom_line() +\rlabs(title = \u0026quot;Mean GDPs by Continent Over Time\u0026quot;,\rcaption = \u0026quot;Source: Free material from www.gapminder.org\u0026quot;)\r\r\rsummarize()\rQuick Example\rInitial Data\rsample_df %\u0026gt;%\rselect(country, continent, lifeExp, pop) %\u0026gt;%\rprettify()\r\r\rcountry\r\rcontinent\r\rlifeExp\r\rpop\r\r\r\r\r\rAustralia\r\rOceania\r\r81.235\r\r20434176\r\r\r\rBrazil\r\rAmericas\r\r72.390\r\r190010647\r\r\r\rHungary\r\rEurope\r\r73.338\r\r9956108\r\r\r\rIreland\r\rEurope\r\r78.885\r\r4109086\r\r\r\rNew Zealand\r\rOceania\r\r80.204\r\r4115771\r\r\r\rNicaragua\r\rAmericas\r\r72.899\r\r5675356\r\r\r\rNigeria\r\rAfrica\r\r46.859\r\r135031164\r\r\r\rSingapore\r\rAsia\r\r79.972\r\r4553009\r\r\r\rSri Lanka\r\rAsia\r\r72.396\r\r20378239\r\r\r\rTunisia\r\rAfrica\r\r73.923\r\r10276158\r\r\r\r\rsample_df %\u0026gt;%\rselect(country, continent, lifeExp, pop) %\u0026gt;%\rgroup_by(continent) %\u0026gt;%\rsummarise(max_pop = max(pop),\rmean_life_exp = mean(lifeExp)) %\u0026gt;%\rprettify(cols_changed = 2:3)\r\r\rcontinent\r\rmax_pop\r\rmean_life_exp\r\r\r\r\r\rAfrica\r\r135031164\r\r60.3910\r\r\r\rAmericas\r\r190010647\r\r72.6445\r\r\r\rAsia\r\r20378239\r\r76.1840\r\r\r\rEurope\r\r9956108\r\r76.1115\r\r\r\rOceania\r\r20434176\r\r80.7195\r\r\r\r\rNow that we know how to use group_by(), we can summarize() data by group. This can be done using all of the summary functions seen earlier.\n\r\rSummary Functions\r\r\r\r\rfirst()\rmin()\r\rlast()\rmax()\r\rnth()\rmean()\r\rn()\rmedian()\r\rn_distinct()\rvar()\r\rIQR()\rsd()\r\r\r\r\rCalculate some summary statistics for each continent.\r\rtake gm_df and group_by() continent\rusing summarize() or summarise(), calculate:\r\rcount with n()\rmean_pop with mean()\rmax_gdp_per_cap with max()\r\r\r\rgm_df %\u0026gt;%\rgroup_by(continent) %\u0026gt;%\rsummarise(count = n(),\rmean_pop = mean(pop),\rmax_gdp_per_cap = max(gdpPercap)) %\u0026gt;%\rprettify(cols_changed = 2:4)\r\r\rcontinent\r\rcount\r\rmean_pop\r\rmax_gdp_per_cap\r\r\r\r\r\rAfrica\r\r624\r\r9916003\r\r21951.21\r\r\r\rAmericas\r\r300\r\r24504795\r\r42951.65\r\r\r\rAsia\r\r396\r\r77038722\r\r113523.13\r\r\r\rEurope\r\r360\r\r17169765\r\r49357.19\r\r\r\rOceania\r\r24\r\r8874672\r\r34435.37\r\r\r\r\r\r\rggplot() Exercise 5\rSteps\nUsing gm_df, filter() the data to remove rows where continent is not \u0026quot;Oceania\u0026quot;\rgroup_by() continent and year\rsummarize() the groups by calculating them mean() of pop\rungroup() the data, because this is a habit that will save you headaches later\rPipe the results to ggplot()\rSelect the plot’s aes()thetics\r\ryear for the x values\rmean_pop for the y values\rcontinent for the color values\r\rAdd geom_line() for the first geometry\rAdd geom_point() for the second geometry\rChange the theme by adding theme_minimal()\rUsing facet_wrap(), split the plot into panels for each continent\r\r~ is used as a formula to select the facet variable\r\rAdd a title and a caption with labs()\r\rgm_df %\u0026gt;%\rfilter(continent != \u0026quot;Oceania\u0026quot;) %\u0026gt;%\rgroup_by(continent, year) %\u0026gt;%\rsummarise(mean_pop = mean(pop)) %\u0026gt;%\rungroup() %\u0026gt;%\rggplot(aes(x = year, y = mean_pop,\rcolor = continent)) +\rgeom_line() +\rgeom_point() +\rtheme_minimal() +\rfacet_wrap(~ continent) +\rlabs(title = \u0026quot;Mean Continent Populations over Time\u0026quot;,\rcaption = \u0026quot;Source: Free material from www.gapminder.org\u0026quot;)\r## Warning: Removed 1 rows containing missing values (geom_path).\r## Warning: Removed 1 rows containing missing values (geom_point).\rالنهاية\nsessionInfo()\r## R version 3.5.1 (2018-07-02)\r## Platform: x86_64-w64-mingw32/x64 (64-bit)\r## Running under: Windows 10 x64 (build 17134)\r## ## Matrix products: default\r## ## locale:\r## [1] LC_COLLATE=English_United States.1252 ## [2] LC_CTYPE=English_United States.1252 ## [3] LC_MONETARY=English_United States.1252\r## [4] LC_NUMERIC=C ## [5] LC_TIME=English_United States.1252 ## ## attached base packages:\r## [1] stats graphics grDevices utils datasets methods base ## ## other attached packages:\r## [1] kableExtra_0.9.0 knitr_1.20.21 gapminder_0.3.0 ## [4] forcats_0.3.0 stringr_1.3.1.9000 dplyr_0.7.99.9000 ## [7] purrr_0.2.4.9000 readr_1.1.1 tidyr_0.8.1.9000 ## [10] tibble_1.4.2 ggplot2_3.1.0.9000 tidyverse_1.2.1.9000\r## ## loaded via a namespace (and not attached):\r## [1] tidyselect_0.2.5 xfun_0.4 haven_1.1.2.9000 ## [4] colorspace_1.3-2 generics_0.0.1.9000 htmltools_0.3.6 ## [7] viridisLite_0.3.0 yaml_2.2.0 utf8_1.1.4 ## [10] rlang_0.3.0.9000 pillar_1.3.0.9000 glue_1.3.0 ## [13] withr_2.1.2.9000 modelr_0.1.2 readxl_1.1.0 ## [16] plyr_1.8.4 munsell_0.5.0 blogdown_0.9.1 ## [19] gtable_0.2.0 cellranger_1.1.0 rvest_0.3.2 ## [22] codetools_0.2-15 evaluate_0.12 labeling_0.3 ## [25] fansi_0.3.0 highr_0.7 broom_0.5.0.9001 ## [28] Rcpp_0.12.19.3 scales_1.0.0.9000 backports_1.1.2 ## [31] jsonlite_1.5 hms_0.4.2 digest_0.6.18 ## [34] stringi_1.2.4 bookdown_0.7.21 grid_3.5.1 ## [37] cli_1.0.1 tools_3.5.1 magrittr_1.5 ## [40] lazyeval_0.2.1 crayon_1.3.4 pkgconfig_2.0.2 ## [43] xml2_1.2.0 lubridate_1.7.4 assertthat_0.2.0 ## [46] rmarkdown_1.10.14 httr_1.3.1 rstudioapi_0.8.0.9000\r## [49] htmldeps_0.1.1 R6_2.3.0 compiler_3.5.1\r\r\r",
    "date": 1521244800,
    "expirydate": -62135596800,
    "kind": "page",
    "lang": "en",
    "lastmod": 1541012094,
    "objectID": "356d974fbbdb1e58c66f2f280f965789",
    "permalink": "/post/yet-another-tidyverse-intro/",
    "publishdate": "2018-03-17T00:00:00Z",
    "relpermalink": "/post/yet-another-tidyverse-intro/",
    "section": "post",
    "summary": "A (hopefully) gentle introduction to R's tidyverse that I used as a primer for a short workshop series I taught.",
    "tags": [
      "R",
      "data-carpentry",
      "tutorial",
      "tidyverse",
      "ggplot",
      "dplyr"
    ],
    "title": "Thoughts on Teaching R and Yet Another Tidyverse Intro",
    "type": "post"
  },
  {
    "authors": [
      "Brendan Knapp"
    ],
    "categories": null,
    "content": "",
    "date": 1519372800,
    "expirydate": -62135596800,
    "kind": "page",
    "lang": "en",
    "lastmod": 1541196093,
    "objectID": "e13fb265d04922b7d1d0d89ec5551aac",
    "permalink": "/talk/r-for-data-carpentry/",
    "publishdate": "2018-02-23T00:00:00-08:00",
    "relpermalink": "/talk/r-for-data-carpentry/",
    "section": "talk",
    "summary": "A three-part workshop series teaching graduate students at the [Middlebury Institute](https://www.middlebury.edu/institute/) the fundamentals of programmatic data carpentry, visualization, and reproducible research.",
    "tags": [
      "R"
    ],
    "title": "R for Data Carpentry and Analysis",
    "type": "talk"
  },
  {
    "authors": [
      "Brendan Knapp"
    ],
    "categories": null,
    "content": "",
    "date": 1506063600,
    "expirydate": -62135596800,
    "kind": "page",
    "lang": "en",
    "lastmod": 1541196093,
    "objectID": "13561d01a9e5342e90cc9b00c3118fc2",
    "permalink": "/talk/intro-to-r/",
    "publishdate": "2017-09-22T00:00:00-07:00",
    "relpermalink": "/talk/intro-to-r/",
    "section": "talk",
    "summary": "Have you always been curious about programming, but haven’t had the opportunity for a simple introduction?\nDo you wish you knew how to access the data available on Twitter or other data-rich websites in your research?\nDo you want to expand your toolkit of hard skills while complementing your knowledge in international policy?\nHave you concluded that technical skills are major career assets and are incredibly attractive to employers?\nIf you answered “Yes” to any of these, please join the META Lab for our R and RStudio Geek Out and learn what’s possible with some some data programming knowledge!\nWe’re going to get our feet wet with a simple Introduction to R Programming which assumes ZERO knowledge.",
    "tags": [
      "R"
    ],
    "title": "Programming in R with RStudio",
    "type": "talk"
  },
  {
    "authors": [
      "Brendan Knapp"
    ],
    "categories": null,
    "content": "Click on the Slides or Code buttons above to view content.\n ",
    "date": 1490943600,
    "expirydate": -62135596800,
    "kind": "page",
    "lang": "en",
    "lastmod": 1541196093,
    "objectID": "69525aa2ee38933c74b7ba3577f043f9",
    "permalink": "/talk/intro-to-python/",
    "publishdate": "2017-03-31T00:00:00-07:00",
    "relpermalink": "/talk/intro-to-python/",
    "section": "talk",
    "summary": "A workshop for graduate students at the [Middlebury Institute](https://www.middlebury.edu/institute/) to introduce them to programming with Python.",
    "tags": [
      "R"
    ],
    "title": "Introduction to Python",
    "type": "talk"
  },
  {
    "authors": [
      "Melissa Hanham",
      "Jeffrey Lewis",
      "Catherine Dill",
      "Grace Liu",
      "Joseph Rodgers",
      "Octave Lepinard",
      "Brendan Knapp",
      "Olivia Hallam",
      "Ben McIntosh"
    ],
    "categories": null,
    "content": "",
    "date": 1372662000,
    "expirydate": -62135596800,
    "kind": "page",
    "lang": "en",
    "lastmod": 1540947664,
    "objectID": "f706c5e7a03814a938c5b41990814e82",
    "permalink": "/publication/geo4nonpro/",
    "publishdate": "2013-07-01T00:00:00-07:00",
    "relpermalink": "/publication/geo4nonpro/",
    "section": "publication",
    "summary": "On June 16, 2018, the James Martin Center for Nonproliferation Studies (CNS) launched Geo4Nonpro 2.0. With a mission to engage a “curated” crowd of satellite imagery analysis experts, Geo4Nonpro (G4N) is a tool for sharing open-source geographic information of known or suspected weapons of mass destruction (WMD) sites.",
    "tags": [
      "Geospatial",
      "Remote Sensing"
    ],
    "title": "Geo4Nonpro 2.0",
    "type": "publication"
  },
  {
    "authors": null,
    "categories": null,
    "content": " Welcome to Slides Academic\nFeatures  Efficiently write slides in Markdown 3-in-1: Create, Present, and Publish your slides Supports speaker notes Mobile friendly slides  Controls  Next: Right Arrow or Space Previous: Left Arrow Start: Home Finish: End Overview: Esc Speaker notes: S Fullscreen: F Zoom: Alt + Click PDF Export: E  Code Highlighting Inline code: variable\nCode block:\nporridge = \u0026quot;blueberry\u0026quot; if porridge == \u0026quot;blueberry\u0026quot;: print(\u0026quot;Eating...\u0026quot;)  Math In-line math: $x + y = z$\nBlock math:\n$$ f\\left( x \\right) = \\;\\frac{{2\\left( {x + 4} \\right)\\left( {x - 4} \\right)}}{{\\left( {x + 4} \\right)\\left( {x + 1} \\right)}} $$\nFragments Make content appear incrementally\n{{% fragment %}} One {{% /fragment %}} {{% fragment %}} **Two** {{% /fragment %}} {{% fragment %}} Three {{% /fragment %}}  Press Space to play!\nOne  Two  Three \nA fragment can accept two optional parameters:\n class: use a custom style (requires definition in custom CSS) weight: sets the order in which a fragment appears  Speaker Notes Add speaker notes to your presentation\n{{% speaker_note %}} - Only the speaker can read these notes - Press `S` key to view {{% /speaker_note %}}  Press the S key to view the speaker notes!\n Only the speaker can read these notes Press S key to view   Themes  black: Black background, white text, blue links (default) white: White background, black text, blue links league: Gray background, white text, blue links beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links   night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links  Custom Slide Customize the slide style and background\n{{\u0026lt; slide background-image=\u0026quot;/img/boards.jpg\u0026quot; \u0026gt;}} {{\u0026lt; slide background-color=\u0026quot;#0000FF\u0026quot; \u0026gt;}} {{\u0026lt; slide class=\u0026quot;my-style\u0026quot; \u0026gt;}}  Custom CSS Example Let\u0026rsquo;s make headers navy colored.\nCreate assets/css/reveal_custom.css with:\n.reveal section h1, .reveal section h2, .reveal section h3 { color: navy; }  Questions? Ask\nDocumentation\n",
    "date": -62135596800,
    "expirydate": -62135596800,
    "kind": "page",
    "lang": "en",
    "lastmod": 1540947664,
    "objectID": "c2915ec5da95791851caafdcba9664af",
    "permalink": "/slides/example-slides/",
    "publishdate": "0001-01-01T00:00:00Z",
    "relpermalink": "/slides/example-slides/",
    "section": "slides",
    "summary": "Welcome to Slides Academic\nFeatures  Efficiently write slides in Markdown 3-in-1: Create, Present, and Publish your slides Supports speaker notes Mobile friendly slides  Controls  Next: Right Arrow or Space Previous: Left Arrow Start: Home Finish: End Overview: Esc Speaker notes: S Fullscreen: F Zoom: Alt + Click PDF Export: E  Code Highlighting Inline code: variable\nCode block:\nporridge = \u0026quot;blueberry\u0026quot; if porridge == \u0026quot;blueberry\u0026quot;: print(\u0026quot;Eating...\u0026quot;)  Math In-line math: $x + y = z$",
    "tags": null,
    "title": "Slides",
    "type": "slides"
  },
  {
    "authors": null,
    "categories": null,
    "content": "",
    "date": -62135596800,
    "expirydate": -62135596800,
    "kind": "page",
    "lang": "en",
    "lastmod": 1540947664,
    "objectID": "d82877ac5e447c72fb4d8d30579d2f8b",
    "permalink": "/project/snatools/",
    "publishdate": "0001-01-01T00:00:00Z",
    "relpermalink": "/project/snatools/",
    "section": "project",
    "summary": "An R toolkit to bridge graph classes and streamline network analytic workflows.",
    "tags": [
      "Network Analysis"
    ],
    "title": "snatools",
    "type": "project"
  }
]